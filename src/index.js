import React from 'react';
import _ from 'lodash';
import dayjs from 'dayjs';
import { Bar } from 'react-chartjs-2';
import { CopyToClipboard } from 'react-copy-to-clipboard';
import './../index.css';

const options = {
  legend: {
    labels: {
      fontSize: 8,
      boxWidth: 3,
    }
  },
  scales: {
    xAxes: [{
      ticks: {
        fontSize: 8,
      },
      stacked: true,
      barPercentage: 0.4
    }],
    yAxes: [{
      ticks: {
        fontSize: 8,
      },
      stacked: true
    }]
  },
  tooltips: {
    callbacks: {
      label: function(tooltipItem, data) {
        const info = data.datasets[tooltipItem.datasetIndex];
        const reportDate = info.all[tooltipItem.datasetIndex].reportDate;
          var label = `${reportDate} ${info.label}: `;
          label += tooltipItem.yLabel || 'n/a';
          label += '%';
          return label;
      }
    }
  }
};

const attributes = [{
  backgroundColor: '#1D8348',
  borderColor: '#1D8348',
  attr: 'strongBuy',
  label: 'Strong Buy'
}, {
  backgroundColor: '#2ECC71',
  borderColor: '#2ECC71',
  attr: 'buy',
  label: 'Buy'
}, {
  backgroundColor: '#5DADE2',
  borderColor: '#5DADE2',
  attr: 'hold',
  label: 'Hold'
}, {
  backgroundColor: 'orange',
  borderColor: 'orange',
  attr: 'sell',
  label: 'Sell'
}, {
  backgroundColor: '#CD5C5C',
  borderColor: '#CD5C5C',
  attr: 'stringSell',
  label: 'Strong Sell'
}];

const genDataSetAndAttributes = (attribute, data) => {
  return {
    fill: false,
    lineTension: 0,
    borderWidth: 2,
    pointRadius: 2,
    pointHoverRadius: 5,
    data: data.map(d => _.get(d, attribute.attr)),
    all: data,
    ...attribute
  };
};

export class AnalystTrends extends React.Component {
  constructor(props) {
    super(props);
    this.state = {

    };
  }

  shouldComponentUpdate(nextProps, nextState) {
    const { profile } = this.props;
    if (!profile) return true;
    if (nextState.copied) return true;
    if (profile.ticker !== nextProps.profile.ticker) return true;
    return false;
  }

  render() {
    const { profile, prop = 'analysts_yh', imgProp = 'analysts_trends_yh_img' } = this.props;
    const { copied } = this.state;
    if (!profile) {
      return (
        <div style={{ fontSize: 8 }}>Not available at this time... </div>
      );
    }
    if (profile[imgProp] && profile[imgProp].url) {
      const btnClass = copied ? 'react-components-show-url btn btn-sm btn-danger disabled font-8' : 'react-components-show-url btn btn-sm btn-warning font-8';
      const btnText = copied ? 'Copied' : 'Copy Img';
      return (
        <div className='react-components-show-button'>
          <img alt={`${profile.ticker} - ${profile.name} analyst opinions`} src={profile[imgProp].url} style={{ width: '100%' }} />
          <CopyToClipboard text={profile[imgProp].url || ''}
            onCopy={() => this.setState({ copied: true })}
          >
            <button className={btnClass} value={btnText}>{btnText}</button>
          </CopyToClipboard>
        </div>
      );
    }
    const info = profile[prop] || {};
    let recommendations = info.arr || [];
    recommendations.reverse();
    const data = {
      labels: recommendations.map(d => d.period),
      datasets: attributes.map(attr => genDataSetAndAttributes(attr, recommendations))
    };

    return (
      <div>
        <div style={{ width: '100%', padding: 5, fontSize: 8 }}>
          <div style={{ color: 'darkred', fontWeight: 'bold' }}>{profile.ticker} - {profile.name} <span className='green'>Analyst Trends</span></div>
          {info.targetHighPrice ? <div><b>Target high:</b> <b style={{ color: 'green' }}>{info.targetHighPrice}</b>&nbsp;{info.currency}</div> : null}
          {info.targetLowPrice ? <div><b>Target low:</b> <b style={{ color: 'green' }}>{info.targetLowPrice}</b>&nbsp;{info.currency}</div> : null}
          {info.targetMeanPrice && info.numberOfAnalystOpinions
            ? <div>
              <b>Average:</b> <b style={{ color: 'green' }}>{info.targetMeanPrice}</b>
                  &nbsp;based on <b style={{ color: 'green' }}>{info.numberOfAnalystOpinions}</b> analysts as of <b>{info.last_crawled.slice(0, 10)}</b>
            </div>
            : null}
        </div>
        <div style={{ width: '100%' }}>
          <Bar data={data} height={180} options={options} />
        </div>
        <div style={{ fontSize: 8, color: 'gray', padding: 5, paddingTop: 2 }}>Generated by <span style={{ color: 'darkred' }}>@earningsfly</span> with <span style={{ fontSize: 16, color: 'red' }}>❤️</span></div>
      </div>
    );
  }
}

export default AnalystTrends;
